#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from web3 import Web3
from dotenv import load_dotenv

# .env 読み込み
load_dotenv()

RPC_URL = os.getenv("RPC_URL")
PRIVATE_KEY = os.getenv("PRIVATE_KEY")
ACCOUNT_ADDRESS = os.getenv("YOUR_WALLET_ADDRESS")

if ACCOUNT_ADDRESS is None:
    raise Exception("YOUR_WALLET_ADDRESS が .env に設定されていません。")

w3 = Web3(Web3.HTTPProvider(RPC_URL))

print("Connected:", w3.is_connected())

# チェックサムアドレスに変換
ACCOUNT_ADDRESS = w3.to_checksum_address(ACCOUNT_ADDRESS)

# 対象のコントラクトアドレス
TOKEN_A = w3.to_checksum_address("0xd7Ba6C5A944c528de8F2ADad98D97303166B74D6")
TOKEN_B = w3.to_checksum_address("0x31F072395183717C51181f0E27651c50AAbAb8f9")
POSITION_MANAGER = w3.to_checksum_address("0x96c8C289fD5a8De8A7d8Bfddd6066b7CdC2d07a7")

# ERC20 ABI（approve, symbol）
ERC20_ABI = [
    {
        "constant": True,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "type": "function"
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_spender", "type": "address"},
            {"name": "_value", "type": "uint256"}
        ],
        "name": "approve",
        "outputs": [{"name": "", "type": "bool"}],
        "type": "function"
    }
]

# NonfungiblePositionManager ABI（mintのみ）
POSITION_MANAGER_ABI = [
    {
        "inputs": [
            {
                "components": [
                    {"internalType": "address", "name": "token0", "type": "address"},
                    {"internalType": "address", "name": "token1", "type": "address"},
                    {"internalType": "uint24", "name": "fee", "type": "uint24"},
                    {"internalType": "int24", "name": "tickLower", "type": "int24"},
                    {"internalType": "int24", "name": "tickUpper", "type": "int24"},
                    {"internalType": "uint256", "name": "amount0Desired", "type": "uint256"},
                    {"internalType": "uint256", "name": "amount1Desired", "type": "uint256"},
                    {"internalType": "uint256", "name": "amount0Min", "type": "uint256"},
                    {"internalType": "uint256", "name": "amount1Min", "type": "uint256"},
                    {"internalType": "address", "name": "recipient", "type": "address"},
                    {"internalType": "uint256", "name": "deadline", "type": "uint256"}
                ],
                "internalType": "struct INonfungiblePositionManager.MintParams",
                "name": "params",
                "type": "tuple"
            }
        ],
        "name": "mint",
        "outputs": [
            {"internalType": "uint256", "name": "tokenId", "type": "uint256"},
            {"internalType": "uint128", "name": "liquidity", "type": "uint128"},
            {"internalType": "uint256", "name": "amount0", "type": "uint256"},
            {"internalType": "uint256", "name": "amount1", "type": "uint256"}
        ],
        "stateMutability": "payable",
        "type": "function"
    }
]

# インスタンス生成
tokenA_contract = w3.eth.contract(address=TOKEN_A, abi=ERC20_ABI)
tokenB_contract = w3.eth.contract(address=TOKEN_B, abi=ERC20_ABI)
position_manager = w3.eth.contract(address=POSITION_MANAGER, abi=POSITION_MANAGER_ABI)

# approve トランザクション
approve_amount = w3.to_wei("10", "ether")

# Approve token A
print("Approving token A...")
txn_a = tokenA_contract.functions.approve(POSITION_MANAGER, approve_amount).build_transaction({
    "from": ACCOUNT_ADDRESS,
    "nonce": w3.eth.get_transaction_count(ACCOUNT_ADDRESS),
    "gas": 200_000,
    "gasPrice": w3.to_wei("10", "gwei")
})
signed_txn_a = w3.eth.account.sign_transaction(txn_a, private_key=PRIVATE_KEY)
tx_hash_a = w3.eth.send_raw_transaction(signed_txn_a.raw_transaction)
print("Token A approve tx hash:", tx_hash_a.hex())

receipt_a = w3.eth.wait_for_transaction_receipt(tx_hash_a, timeout=600, poll_latency=5)
print("Approve A receipt:", receipt_a.status)

# Approve token B
print("Approving token B...")
txn_b = tokenB_contract.functions.approve(POSITION_MANAGER, approve_amount).build_transaction({
    "from": ACCOUNT_ADDRESS,
    "nonce": w3.eth.get_transaction_count(ACCOUNT_ADDRESS),
    "gas": 200_000,
    "gasPrice": w3.to_wei("10", "gwei")
})
signed_txn_b = w3.eth.account.sign_transaction(txn_b, private_key=PRIVATE_KEY)
tx_hash_b = w3.eth.send_raw_transaction(signed_txn_b.raw_transaction)
print("Token B approve tx hash:", tx_hash_b.hex())

receipt_b = w3.eth.wait_for_transaction_receipt(tx_hash_b, timeout=600, poll_latency=5)
print("Approve B receipt:", receipt_b.status)

# Mint transaction
print("Minting position...")

# Cypherium uses millisecond timestamp, convert to seconds
block_ts_ms = w3.eth.get_block("latest")["timestamp"]
block_ts_sec = block_ts_ms // 1000
deadline = block_ts_sec + 600  # 10 minutes later

mint_params = {
    "token0": TOKEN_A,
    "token1": TOKEN_B,
    "fee": 3000,
    "tickLower": -600,
    "tickUpper": 600,
    "amount0Desired": w3.to_wei("1", "ether"),
    "amount1Desired": w3.to_wei("1", "ether"),
    "amount0Min": 0,
    "amount1Min": 0,
    "recipient": ACCOUNT_ADDRESS,
    "deadline": deadline
}

txn_mint = position_manager.functions.mint(mint_params).build_transaction({
    "from": ACCOUNT_ADDRESS,
    "nonce": w3.eth.get_transaction_count(ACCOUNT_ADDRESS),
    "gas": 1_500_000,
    "gasPrice": w3.to_wei("10", "gwei"),
    "value": 0
})
signed_txn_mint = w3.eth.account.sign_transaction(txn_mint, private_key=PRIVATE_KEY)
tx_hash_mint = w3.eth.send_raw_transaction(signed_txn_mint.raw_transaction)
print("Mint tx hash:", tx_hash_mint.hex())

receipt_mint = w3.eth.wait_for_transaction_receipt(tx_hash_mint, timeout=600, poll_latency=5)
print("Mint receipt status:", receipt_mint.status)

# Mint tx logs → tokenId を抽出
print("=== Mint receipt logs ===")
found_token_id = False
for log in receipt_mint.logs:
    # topic0 が Transfer イベントの signature に一致する場合のみ抽出
    if log["topics"][0].hex().lower() == "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef":
        token_id = int(log["topics"][3].hex(), 16)
        print("✅ Found tokenId:", token_id)
        found_token_id = True
if not found_token_id:
    print("❌ tokenId not found in logs!")
